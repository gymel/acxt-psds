Persistent Storage für Data-Sets (allegro-C eXTension)
======================================================
:author: Thomas Berger <ThB@gymel.com>
:lang: de
v0.1, 2015-08-17

Einführung
----------

_allegro-C_ erlaubt seit Version 34.0 die sitzungs- und benutzerübergreifende Ablage freier Inhalte
im Sinne eines einfachen Key-Value-Stores in den Indexdateien. 
Dies erlaubt eine beschränkte Datenhaltung auch jenseits der eigentlichen Datensätze und insbesondere
wird die Notwendigkeit aufgehoben, zunächst Kategorien und zugehörige Indexierungsvorschriften zu hinterlegen.


Modell
------

Implementierung
~~~~~~~~~~~~~~~

Datasets werden durch ein _Präfix_ oder einen _Namespace_ identifiziert, dies wird durch die 
Bibliotheksfunktionen in ein _Token_ übersetzt, das den jeweiligen Einträgen aus dem Dataset
im Index vorangestellt wird.
Diese indirekte Methode hat folgende Vorteile:

1. Indexeinträge sind in der Länge beschränkt, manche URLs als Präfix sind selbst bereits recht lang

2. _Finalisierung_ als endgültige Assoziierung des Tokens mit dem Namespace-Präfix erfolgt erst nach
   dem erfolgreichen Laden des gesamten Datasets, im Fall von Problemen ist ein Rollback möglich.

Technisch haben damit die einzelnen Key-Value-Paare aus einem Dataset die Realisierung als je eine
``Persistente Variable´´ mit dem Zusammengesetzten Namen _Token_ +#+ _Key_.


Metadaten
~~~~~~~~~

Die Konkordanz zwischen _Namespace_ und _Token_ wird über Schlüssel mit dem Präfix +acxt.de:psds+ realisiert:

* ++acxt.de:psds:_prefixes#++__<Namespace>__++=++__<Token>__
* ++acxt.de:psds:_tokens#++__<Token>__++=++__<Namespace>__

Mit dem Unterstrich +_+ beginnende Keys sind reserviert für Metainformationen zum jeweiligen Dataset,
derzeit festgelegte Schlüsselwörter sind:

Encoding::
   Angabe der Zeichencodierung der Originaldatei (derzeit nur UTF-8 erlaubt)

Revision::
   Versionsnummern etc. der Originaldatei

Date::
   Zur Version der Daten assoziierter Zeitstempel (Datenstand, Veröffentlichungs-, oder Downloaddatum)

URI::
   URL für exakt diese Version der Daten

RefreshURI::
   URL zum Bezug einer aktualisierten Version der Daten

FileName::
FileDate::
LoadDate::
Extent::
   Werden beim Import eines Datasets automatisch vergeben




Konfiguration
~~~~~~~~~~~~~

Folgende globale Variable werden in +psds_INIT+ gesetzt:

+$PSDS_NeesVer+::
  Minimale Version von a99/acon (+35.0+)

+$PSDS_Store+::
  zu nutzendes Indexregister (Default +~z1+ wird gesetzt, falls die Variable nicht vorbesetzt ist)

CAUTION: Nutzung eines vom ``normalen´´ PS-Speicher abweichenden Index erfordert Restitution des
vorigen Wertes nach den jeweiligen Operationen. Das dafür benötigte Feature von allegro-C (ein
_Cstring_, der das Auslesen der aktuellen Setzung erlaubt) ist noch nicht implementiert.

+$PSDS_Namespace+::
  Präfix für die Token-Präfix-Konkordanzen (default: +acxt.de:psds+)


API
---

Unterprogramme
~~~~~~~~~~~~~~

Soweit nicht anders vermerkt, gilt als Aufrufargument der Inhalt der _internen Variable_ (iV),
Rückgabe eines Werts erfolgt ebenfalls in der iV.

Falls psdatasets.flx per _include_ in einen anderen Flex eingebunden wird, so können die
folgenden Unterprogramme mittels _call_ aufgerufen werden oder mittels der folgenden
Verabredung, die einen Call-Stack emuliert:

+$psds_psr+:: Label, zu dem der Rücksprung vorzunehmen ist (ein Stack)
+$psds_result+:: Ergebnis nach dem Rücksprung (anstelle der _iV_)

Beispiel:
--------------------------
var $psds_psr "_hyphenate_init" ";"\ins $psds_psr
var $prefix
jump psds_gettoken
:_hyphenate_init
var $psds_result
--------------------------


psds_INIT
^^^^^^^^^
Globale Setzungen, einmalig aufzurufen.

psds_check
^^^^^^^^^^
Prüft auf Existenz des benötigten Index und auf geeignete Version von a99.


<token> = psds_createtoken _<namespace prefix>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Ein eindeutiges Token zur Nutzung als Indexpräfix wird generiert und das übergebene _namespace prefix_ als
++acxt.de:psds:_tokens#++__<token>__++=++__<namespace prefix>__ abgelegt.


psds_finishtoken _<token>_
^^^^^^^^^^^^^^^^^^^^^^^^^^
Für das bei der Generierung von _token_ hinterlegte _namespace prefix_ wird der Gegeneintrag
++acxt.de:psds:_prefixes#++__<namespace prefix>__++=++__<token>__ erzeugt.

TellMe: Muss der Namespace nach der Tokengenerierung veränderbar sein, etwa weil er im Dataset selber vermerkt ist
und daher zum Zeitpunkt des Aufrufs von psds_createtoken noch nicht bekannt ist?


<token> = psds_gettoken _<namespace prefix>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Das zum _namespace prefix_ hinterlegte Token wird (zur Nutzung als Indexpräfix) zurückgegeben.


<count> = psds_loadfile _<filename>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Ebenfalls übergeben: +$psds_prefix+ (typischerweise ein von +psds_gettoken+ geliefertes _Token_)

Die UTF-8-codierte Datei _filename_ wird zeilenweise verarbeitet:

* Leere oder mit Spatium oder +#+ beginnende Zeilen werden übersprungen
* Mit Unterstrich +_+ beginnende Zeilen sollten die definierten Meta-Keywords bedienen
* Andere Zeilen werden als _Key=Value_ bzw. _Key Value_ aufgefasst und in der Form
  _$psds_prefix_ +#+ _Key_ +=+ _Value_ indexiert.

CAUTION: In Zeilen mit dem Zeichen +=+ wird alles davor stehende als Key interpretiert, in anderen alles vor dem ersten Blank.

TellMe: Ist BOM handling zu implementieren?

Abschließend werden die Meta-Schlüssel +_FileName+, +_FileDate+, +_LoadDate+ und +_Extent+ angelegt.

Rückgabe ist die Anzahl der eingetragenen Zeilen, oder "-" bei Problemen.


<count> = psds_unload _<token>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Alle Schlüssel mit Präfix _token_+#+ werden entfernt, sowie der Eintrag +acxt.de:psds:_tokens#__<token>__=__<Namespace>__+

Rückgabe ist die Anzahl der ausgetragenen Zeilen, oder "-" bei Problemen.


psds_inspect _<namespace>_
^^^^^^^^^^^^^^^^^^^^^^^^^^
Der Index wird beim zum _namespace_ korrespondierenden _token_ als Präfix aufgeschlagen

psds_inspect_token _<token>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Der Index wird beim _token_ aufgeschlagen.

psds_inspect_tokenmeta _<token>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Der Index wird bei den zum _token_ gehörenden Meta-Keys (beginnen mit +_+) aufgeschlagen.



Kommandointerface
~~~~~~~~~~~~~~~~~
Wird _psdatasets.flx_ per _exec_ oder Flip als ExFlex aufgerufen, so kann die Anwendervariable +#ucc+ mit einem Kommando
belegt werden. Ergebnisse werden dann als Messagebox angezeigt. Der Aufruf von _psds_INIT_ erfolgt automatisch.

check
^^^^^
Entspricht Aufruf von _psds_check_.


loadfile _namespace_ _filename_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Entspricht Aufruf von _psds_loadfile_.

unload _token_
^^^^^^^^^^^^^^
Entspricht Aufruf von _psds_unload_.



inspect _namespace_
^^^^^^^^^^^^^^^^^^^
Entspricht Aufruf von _psds_inspect_

inspect_token _token_
^^^^^^^^^^^^^^^^^^^^^
Entspricht Aufruf von _psds_inspect_token_

inspect_tokenmeta _token_
^^^^^^^^^^^^^^^^^^^^^^^^^
Entspricht Aufruf von _psds_inspect_tokenmeta_


Beispiel
--------
Die folgende Sequenz ist typisch für das kontrollierte Laden eines Datasets:

1. Ein zum gegebenen +$prefix+ evtl. bereits existierendes _Token_ wird ermittelt
2. Für +$prefix+ wird von psds_createtoken ein _Token_ generiert
3. Für das _Token_ als $psds_prefix und den gegebenen Dateinamen führt psds_loadfile die Lade-Operation aus
4. Falls dies erfolgreich war, wird das neue _Token_ mittels psds_finishtoken finalisiert
5. sowie alles zum früheren Token gespeicherte mittles psds_unload entfernt.

--------------------------
  // Initialisierung
perform psds_INIT

  // Existierendes Token $oldtoken ermitteln
var $prefix
perform psds_gettoken
ins $oldtoken

  // Frisches Token $token generieren lassen
var $prefix
perform psds_createtoken
ins $token

  // Daten aus $filename laden, Ergebnis in $num aufbewahren
ins $psds_prefix
var $filename
perform psds_loadfile
ins $num
if "-" jump err

 // Erfolg verbuchen / soeben geladene Daten als aktuell gueltige deklarieren
var $token
perform psds_finishtoken

 // aeltere Daten loeschen
var $oldtoken
perform psds_unload
ins $unum
var $unum " entries unloaded for old token " $oldtoken
show iV

 // Erfolg anzeigen
var $num " entries loaded for token " $token
var + n $unum " entries unloaded for old token " $oldtoken
mess
end
--------------------------


Beispielanwendung
-----------------

Im Unterverzeichnis link:./example/[example] liegt _isbnutil.flx_, der die ISBN-Range-Tabelle
der Internationalen ISBN-Agentur als Dataset verwaltet und nutzt.

Unter https://www.isbn-international.org/range_file_generation kann man den aktuellen Stand
der ISBN-Gruppeneinteilungen interaktiv als XML-Datei downloaden und anschließend mittels des XSLT-Stylesheets
link:./example/ISBNRangeMessage2isbnutils.xsl[ISBNRangeMessage2isbnutils.xsl] in ein für psdatasets.flx
geeignetes Format umwandeln 
(zu Beispielzwecken ist das Ergebnis der Umwandlung als link:/example/RangeMessage.dat[RangeMessage.dat] hier hinterlegt).

TellMe: XSLT-basierende Umwandlung von XML-Daten in für die Weiterverarbeitung hier besser geeignete Textdateien
ist ein häufiger Schritt. Sollte psdatasets.flx hierfür geeignete Mechanismen bereitstellen (und damit letztendlich
in die Lage versetzt werden, für viele Datasets ein _refresh_ mit allgemeinen Methoden auszuführen)? Oder sollte
diese Funktionalität besser vollständig separat implementiert werden und daher tendenziell von den psdataset.flx
nutzenden Anwendungen eingebunden werden, die dann jeweils eine individuelle _refresh_-Methode implementieren müssten?

Verwaltung des Datasets
~~~~~~~~~~~~~~~~~~~~~~~

_isbnutil.flx_ nutzt das feste Präfix +https://www.isbn-international.org/range_file_generation+ um die Daten zu 
laden (Default: +RangeMessage.dat+ im Programmverzeichnis).

TellMe: Wo sollte man solche Dateien (Heruntergeladene Rohdaten bzw. deren Aufbereitung) ablegen: +vs.alg+
liegt zwar auch direkt im Programmverzeichnis, aber das scheint nicht optimal. Wäre eine ``Rohdatenablage´´
unterhalb des Programmverzeichnisses angemessen oder ein nach dem Flex benanntes Unterverzeichnis des
Flex-Verzeichnisses?

Die folgenden Funktionen sind Interfaces zu als Routinen genutzten Einsprüngen in psdatasets.flx, derzeit
können sie nur als ``Kommandos´´ (in +#ucc+) für Flex-Aufrufe genutzt werden.

---------------------------------------------------
x var "inspect"\ins #ucc\var "X isbnutils.flx"\exec
---------------------------------------------------


load _[<Dateiname>]_
^^^^^^^^^^^^^^^^^^^^

Daten werden aus der angegebenen Datei (Default _ProgDir_/RangeMessage.dat) geladen, bei Erfolg
dann evtl. früher geladene Daten zum Präfix gelöscht. 

Diese Funktion kombiniert diverse Aufrufe der Routinen aus psdatasets.flx etwa entsprechend dem
Beispiel oben.


cleanup
^^^^^^^
Evtl. vorhandene Daten zum Präfix werden gelöscht.


inspect
^^^^^^^
entspricht _psds_inspect_.


meta
^^^^
entspricht _psds_inspect_tokenmeta_.


TellMe: Eine Verwaltungsseite (RTF? Janas-HTML?) zu isbnutils.flx muss diese vier Funktionen
als Flips anbieten. Oder kann eine allgemeine Verwaltungsseite diese Funktionen anbieten
und dabei den jeweiligen Flex einstellbar halten? Müsste im Persistenzspeicher zusätzlich
zur vorhandenen Konkordanz noch eine von Namespaces zu Flexen hinterlegt werden?



Nutzung des Datasets
~~~~~~~~~~~~~~~~~~~~

Die folgende Funktion nutzt das geladene Dataset, sie kann als Unterprogramm aufgerufen werden oder
als ``Kommando'' in +#ucc+:

_<cleanisbn13>_ = hyphenate _<isbn13>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Die übergebene ISBN (nur ISBN-13) wird entsprechend den RangeMessage-Daten an den korrekten
Positionen mit Bindestrichen versehen (Prüfziffer +x+ wird nach +X+ umgewandelt).

psdatasets.flx wird nur zur Ermittlung des tatsächlichen Indexprefix mittels _psds_gettoken_
genutzt, die eigentlichen Indexzugriffe erfolgen dann hier (etwas atypisch: Es müssen nicht
konkrete Werte nachgeschlagen werden, sondern die dem gesuchten Wert am nächsten liegenden
Datenpunkte)

Caution: Die Routine verarbeitet nur die ISBN. Evtl. folgende Sternchen, Qualifier oder Preise
bleiben unberücksichtigt, müssen also ggfls. vorher abgetrennt und anschließend wieder angehängt
werden.

Tip: Die Routine akzeptiert auch ``falsche´´ Prüfziffern. ISBN-10 können also ebenfalls
verarbeitet werden, indem vorab ein Präfix +978-+ vorangestellt wird und hinterher wieder
entfernt.

Sonstige Funktionen
~~~~~~~~~~~~~~~~~~~

Die folgenden Hilfsfunktionen haben nichts mit dem RangeMessage Dataset zu tun, sie können nur
als Unterprogramm aufgerufen werden:


_<digit>_ = checkdigit13 _<isbn13>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Zur gegebenen ISBN-13 die Prüfziffer berechnen.

_<isbn13>_ = toisbn13 _<isbn10>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Zur gegebenen ISBN-10 die korrespondierende ISBN-13 bestimmen.

_<result>_ = testisbn13 _<isbn13>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Rückgabe +*+ falls die Prüfziffer der gegebenen ISBN-13 nicht stimmt, sonst die leere Zeichenkette.


_<digit>_ = checkdigit10 _<isbn10>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Zur gegebenen ISBN-10 die Prüfziffer berechnen.

_<isbn10>_ = toisbn10 _<isbn13>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Zur gegebenen ISBN-13 (mit Präfix 978-) die korrespondierende ISBN-10 bestimmen.

_<result>_ = testisbn10 _<isbn10>_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Rückgabe +*+ falls die Prüfziffer der gegebenen ISBN-10 nicht stimmt, sonst die leere Zeichenkette.


TellMe: Wahrscheinlich fehlt noch eine Funktion mit der Heuristik, ob es sich um eine
ISBN bzw. konkret eine ISBN-10 oder ISBN-13 handelt sowie allgemeinere Funktionen, die 
die Prüfziffer automatisch mit der richtigen Methode für ISBN-10 bzw. -13 testen oder 
berechnen? Auch solche, die ermitteln, ob die korrespondierende ISBN im Datensatz
bereits gespeichert ist?


Lizenz
------

include::LICENSE.txt[]


